AND -> and
BREAK -> break
IF -> if
TYPE -> type
CONST -> const
NEQ -> NOT EQUAL
DOTBETWEEN -> dotbetween
UNDEFINED -> undefined
CASE -> Case
ELIF -> ELSE IF
CATCH -> catch
CONTINUE -> continue
DEFAULT -> default
DELETE -> delete
ELSE -> else
FALSE -> false
FINALLY -> finally
ISEQ -> iseq
FOR -> for
FUNCTION -> function
NULL -> null
RETURN -> return
SWITCH -> switch
THROW -> throw
TRY -> try
CLASS -> class
TRUE -> true
VAR -> var
LET -> let

IMPORT -> import
FROM -> from
AS -> as
WHILE -> while
LBRACKET -> lbracket
RBRACKET -> rbracket
NEWLINE -> newline
EQUAL -> equal
PLUS -> plus
MINUS -> minus
TIMES -> times
DIV -> div
MOD -> mod
LCURLY -> lcurly
RCURLY -> rcurly
LSQUARE -> lsquare
RSQUARE -> rsquare
SEMICOLON -> semicolon
COLON -> colon
COMMA -> comma
DOT -> dot
NOT -> not
NOTEQ -> noteq
AND -> and
OR -> or
GREATER -> greater
LESS -> less
GREATEREQUAL -> greaterequal
LESSEQUAL -> lessequal
PLUSPLUS -> plusplus
MINUSMINUS -> minusminus
ANDAND -> andand
OROR -> oror
STRING -> string

INT -> int
VARINT -> VAR
VARINT -> INT
VARINT -> BOOL

ALL -> UNDEFINED
ALL -> VARINT
ALL -> STRING
ALL -> NULL
ALL -> LIST
ALL -> INT



CHAR -> char
COMMENT -> comment
UNDERSCORE -> underscore
PLUSEQUAL -> plusequal
MINUSEQUAL -> minusequal
TIMESEQUAL -> timesequal
DIVEQUAL -> divequal
BOOL -> TRUE
BOOL -> FALSE

TYPE -> VAR
TYPE -> LET
TYPE -> CONST

STATIC -> INT
STATIC -> VAR
STATIC -> LIST
STATIC -> STRING
STATIC -> BOOL
STATIC -> NONE
STATIC -> VAR LBRACKET RBRACKET
STATIC -> VAR LBRACKET PARAMETER RBRACKET
STATIC -> LBRACKET INT RBRACKET
STATIC -> LBRACKET STRING RBRACKET
STATIC -> LBRACKET BOOL RBRACKET
STATIC -> IF_OP

OP_ARI -> PLUS
OP_ARI -> MINUS
OP_ARI -> TIMES
OP_ARI -> DIV
OP_ARI -> MOD


ASSIGN_OPERATOR -> EQUAL
ASSIGN_OPERATOR -> SUBTREQ
ASSIGN_OPERATOR -> MULEQ
ASSIGN_OPERATOR -> DIVEQ

CREMENT_OPERATOR -> PLUSPLUS
CREMENT_OPERATOR -> MINUSMINUS

ARIT_OPERATOR -> ADD
ARIT_OPERATOR -> SUBTR
ARIT_OPERATOR -> MUL
ARIT_OPERATOR -> DIV
ARIT_OPERATOR -> MOD

ARIT_OP -> INT
ARIT_OP -> VAR
ARIT_OP -> LBRACKET ARIT_OPERATOR RBRACKET
ARIT_OP -> ARIT_OPERATION

LOGIC_OPERATOR -> AND
LOGIC_OPERATOR -> OR
LOGIC_OPERATOR -> ISEQ
LOGIC_OPERATOR -> NEQ
LOGIC_OPERATOR -> LESS
LOGIC_OPERATOR -> GREATER
LOGIC_OPERATOR -> LESSEQUAL
LOGIC_OPERATOR -> GREATEREQUAL

LOGIC_OP -> VAR
LOGIC_OP -> INT
LOGIC_OP -> STRING
LOGIC_OP -> NULL
LOGIC_OP -> BOOL
LOGIC_OP -> LOGIC_OPERATION
LOGIC_OP -> ARIT
LOGIC_OP -> ARIT_OPERATION
LOGIC_OP -> FUNC_SENTENCE
LOGIC_OP -> VAR

FUNC_SENTENCE -> VAR LBRACKET RBRACKET
FUNC_SENTENCE -> VAR LB PARA

LOGIC_OPERATION -> LOGIC_OP LOGIC_OPERATOR LOGIC_OP
LOGIC_OPERATION -> LBRACKET LOGIC_OPERATION RBRACKET
LOGIC_OPERATION -> VAR IN LIST
LOGIC_OPERATION -> VAR IN STRING


IF_OPERATOR -> ISEQ
IF_OPERATOR -> NEQ
IF_OPERATOR -> GREATER
IF_OPERATOR -> GREATEREQUAL
IF_OPERATOR -> LESS
IF_OPERATOR -> LESSEQUAL
IF_OPERATOR -> ANDAND
IF_OPERATOR -> OROR

IF_VAR -> INTVAR
IF_VAR -> NOT INTVAR
IF_VAR -> BOOL
IF_VAR -> NOT IF_VAR
IF_OP -> LBRACKET IF_VAR IF_OPERATOR IF_OP RBRACKET
IF_OP -> LBRACKET VAR IF_OPERATOR INT RBRACKET
IF_OP -> LBRACKET VAR IF_OPERATOR VAR RBRACKET
IF_OP -> LBRACKET IF_VAR LESS IF_VAR RBRACKET
IF_OP -> LBRACKET IF_OP RBRACKET

IFSTATEMENT -> IFSTATEMENT NEWLINE
IFSTATEMENT -> IF LBRACKET VAR IF_OPERATOR INT RBRACKET CURLY
IFSTATEMENT -> IF LBRACKET FUNCTION CURLY
IFSTATEMENT -> IF IF_OP CURLY
IFSTATEMENT -> IF LBRACKET STATIC RBRACKET CURLY
IFSTATEMENT -> IF LBRACKET VAR IN VAR RBRACKET CURLY
IFSTATEMENT -> IF LBRACKET ALL RBRACKET LCURLY
IFSTATEMENT -> IF LBRACKET VAR MOD ALL ISEQ INT RBRACKET CURLY
IFSTATEMENT -> IF LBRACKET VAR NOTEQ ALL RBRACKET CURLY
ELIFSTATEMENT -> ELIF IF_OP CURLY
ELIFSTATEMENT -> ELIF LBRACKET VAR IN VAR RBRACKET CURLY
ELSESTATEMENT -> ELSE CURLY
ELIF_BANYAK -> ELIFSTATEMENT
ELIF_BANYAK -> ELIFSTATEMENT ELIF_BANYAK
IF_BLOK -> IFSTATEMENT
IF_BLOK -> IFSTATEMENT ELSESTATEMENT
IF_BLOK -> IFSTATEMENT ELIF_BANYAK ELSESTATEMENT
IF_BLOK -> IFSTATEMENT ELIF_BANYAK

PARAMETER -> TYPE VAR

VARSTATEMENT -> VAR EQUAL STRING SEMICOLON
VARSTATEMENT -> VAR EQUAL INT SEMICOLON
VARSTATEMENT -> VAR EQUAL BOOL SEMICOLON
VARSTATEMENT -> VAR PLUSPLUS 

ASSIGN_STATEMENT -> VAR ASSIGN_OPERATOR ALL
ASSIGN_STATEMENT -> VAR CREMENT_OPERATOR
ASSIGN_STATEMENT -> TYPE CREMENT_OPERATOR
ASSIGN_STATEMENT -> TYPE VAR ASSIGN_OPERATOR ALL

IDENTIFIER -> PARAMETER EQUAL ALL 

CONSOLSTATEMENT -> VAR DOTBETWEEN VAR CONSOLPARAM
CONSOLPARAM -> LBRACKET ALL RBRACKET
CONSOLPARAM -> LBRACKET ARIT_OPERATOR RBRACKET
VAR_PARAM -> VAR
VAR_PARAM -> VAR_PARAM COMMA VAR_PARAM
PARAM -> LBRACKET VAR_PARAM RBRACKET
PARAM -> LBRACKET RBRACKET

FUNC -> FUNCTION VAR PARAM CURLY
FUNC -> FUNCTION VAR LBRACKET RBRACKET CURLY
FUNC -> FUNCTION VAR LBRACKET FUNC RBRACKET CURLY

WHILE_STATEMENT -> WHILE IF_OP CURLY
WHILE_STATEMENT -> WHILE VARINT CURLY

ASSIGN -> UNDEFINED
ASSIGN -> INT
ASSIGN -> VAR
ASSIGN -> STRING
ASSIGN -> NULL
ASSIGN -> LIST
ASSIGN -> ARIT_OPERATION
ASSIGN -> LOGIC_OPERATION
ASSIGN -> LOGIC_OPERAND
ASSIGN -> FUNCTION_STATEMENT
ASSIGN -> FUNCTION_STATEMENT_EXPR
ASSIGN -> FUNCTION_STATEMENT_ARROW
ASSIGN -> FUNCTION_SENTENCE
ASSIGN -> METHOD_SENTENCE
ASSIGN -> JSON_STATEMENT

SENTENCE -> IF_BLOK
SENTENCE -> RETURN ALL SEMICOLON
SENTENCE -> CONSOLSTATEMENT SEMICOLON
SENTENCE -> BREAK SEMICOLON
SENTENCE -> DELETE SEMICOLON
SENTENCE -> NEWLINE SENTENCE
SENTENCE -> SENTENCE NEWLINE SENTENCE
SENTENCE -> SENTENCE NEWLINE
SENTENCE -> ASSIGN
SENTENCE -> FOR_STMT
SENTENCE -> STATIC SEMICOLON
SENTENCE -> CONTINUE SEMICOLON
SENTENCE -> VARSTATEMENT
SENTENCE -> SENTENCE SENTENCE
SENTENCE -> ASSIGN_STATEMENT SEMICOLON
SENTENCE -> DELETE VAR SEMICOLON
SENTENCE -> IF_STATEMENT


IMPORT_STMT -> IMPORT VAR FROM STRING SEMICOLON
IMPORT_STMT -> IMPORT TIMES AS VAR FROM STRING SEMICOLON
IMPORT_STMT -> IMPORT LCURLY VAR RCURLY FROM STRING SEMICOLON
IMPORT_STMT -> IMPORT STRING SEMICOLON
IMPORT_STMT -> IMPORT TIMES AS VAR FROM STRING SEMICOLON


CURLY -> LCURLY RCURLY
CURLY -> LCURLY NEWLINE RCURLY
CURLY -> LCURLY NEWLINE SENTENCE RCURLY
CURLY -> LCURLY NEWLINE IF_BLOK RCURLY
CURLY -> LCURLY FUNC_SENTENCE RCURLY
CURLY -> LCURLY SENTENCE RCURLY
CURLY -> LCURLY IF_BLOK RCURLY

STRING -> STRING IN STRING
STRING -> STRING IN VAR
STRING -> STRING IN LIST
STRING -> STRING IN DICT
STRING -> multiline

PART -> CLASS_STMT
PART -> FUNC
PART -> FOR_STMT
PART -> WHILE_STATEMENT
PART -> SENTENCE

IF_STATEMENT -> IF LBRACKET STATIC RBRACKET CURLY

FOR_STMT -> FOR LBRACKET ASSIGN_STATEMENT SEMICOLON LOGIC_OPERATION SEMICOLON ASSIGN_STATEMENT RBRACKET CURLY
FOR_STMT -> FOR LBRACKET VAR IN LIST RBRACKET CURLY
FOR_STMT -> FOR LBRACKET VAR IN STRING RBRACKET CURLY


S -> S SEMICOLON
S -> S S
S -> S NEWLINE
S -> IMPORT_STMT
S -> IMPORT_STMT NEWLINE
S -> IMPORT_STMT NEWLINE S
S -> IMPORT_STMT S
S -> SS
S -> PART NEWLINE
S -> PART
S -> PART SS
SS -> CLASS_STMT
SS -> FUNC_STMT
SS -> FOR_STMT
SS -> WHILE_STMT
SS -> SENTENCE
SS -> IDENTIFIER
SS -> PART